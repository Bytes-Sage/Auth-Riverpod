import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

final firebaseAuthProvider = Provider<FirebaseAuth>((ref) {
  return FirebaseAuth.instance;
});

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../core/providers/firebase_providers.dart';

final authControllerProvider =
    StateNotifierProvider<AuthController, User?>((ref) {
  return AuthController(ref.read);
});

class AuthController extends StateNotifier<User?> {
  final Reader _read;

  AuthController(this._read) : super(null) {
    _read(firebaseAuthProvider).authStateChanges().listen((user) {
      state = user;
    });
  }

  Future<void> signUp(String email, String password) async {
    try {
      final credential = await _read(firebaseAuthProvider)
          .createUserWithEmailAndPassword(email: email, password: password);

      await credential.user?.sendEmailVerification();
    } catch (e) {
      throw Exception("Sign up failed: $e");
    }
  }

  Future<void> login(String email, String password) async {
    try {
      final userCredential = await _read(firebaseAuthProvider)
          .signInWithEmailAndPassword(email: email, password: password);

      final user = userCredential.user;
      if (user != null && !user.emailVerified) {
        await user.sendEmailVerification();
        throw Exception("Please verify your email before logging in.");
      }
    } catch (e) {
      throw Exception("Login failed: $e");
    }
  }

  Future<void> resetPassword(String email) async {
    try {
      await _read(firebaseAuthProvider).sendPasswordResetEmail(email: email);
    } catch (e) {
      throw Exception("Reset failed: $e");
    }
  }

  Future<void> signOut() async {
    await _read(firebaseAuthProvider).signOut();
  }
}

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../features/auth/application/auth_controller.dart';
import '../features/auth/presentation/login_screen.dart';
import '../home/home_screen.dart';

class AuthGate extends ConsumerWidget {
  const AuthGate({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final user = ref.watch(authControllerProvider);

    if (user != null && user.emailVerified) {
      return const HomeScreen();
    } else {
      return const LoginScreen();
    }
  }
}
